# -*- coding: utf-8 -*-
"""Wildfire Prediction Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VwYonme0UBl3k2lDCnnRyIZGxr_QtRZG

#Climate Conditions
"""

import kagglehub
import pandas as pd
import os
# Download both datasets
path1 = kagglehub.dataset_download("ayoubjadouli/morocco-wildfire-predictions-2010-2022-ml-dataset")
file_path = os.path.join(path1, 'Date_final_dataset_balanced_float32.parquet')
df = pd.read_parquet(file_path)
df = df.head(20000)

df = df[['latitude','longitude','NDVI','average_temperature_lag_1', 'precipitation_lag_1','dew_point_lag_1','wind_speed_lag_1','is_fire','acq_date']].rename(columns={
    'average_temperature_lag_1': 'Temperature',
    'precipitation_lag_1': 'Precipitation',
    'dew_point_lag_1': 'Humidity',
    'wind_speed_lag_1': 'Windspeed',
    'acq_date': 'Date'})

df.head(10)

df['Date'] = pd.to_datetime(df['Date'])

# Extract year, month, and day
df['Year'] = df['Date'].dt.year
df['Month'] = df['Date'].dt.month
df['Day'] = df['Date'].dt.day

# Drop the original 'Date' column
df = df.drop('Date', axis=1)

print(df.head())

from sklearn.model_selection import train_test_split

X = df.drop('is_fire', axis=1)
y = df['is_fire']

X_train, X_temp, y_train, y_temp = train_test_split(X, y, test_size=0.3, random_state=42)
X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)

print("Train set shape:", X_train.shape, y_train.shape)
print("Validation set shape:", X_val.shape, y_val.shape)
print("Test set shape:", X_test.shape, y_test.shape)

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# Initialize and train the model
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Make predictions on the validation set
y_pred = model.predict(X_val)

# Evaluate the model
accuracy = accuracy_score(y_val, y_pred)
print(f"Validation Accuracy: {accuracy}")

from sklearn.metrics import confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

# Assuming y_val and y_pred are already defined from the previous code

# Compute the confusion matrix
cm = confusion_matrix(y_val, y_pred)

# Plot the confusion matrix using seaborn
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues",
            xticklabels=['No Fire', 'Fire'], yticklabels=['No Fire', 'Fire'])
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

print(df[['Day','Month','Year']].max())

"""#Images"""

!git clone https://github.com/opjns/Wildfire-prediction.git

!pip install tensorflow keras numpy matplotlib

import os
import shutil
import numpy as np
from sklearn.model_selection import train_test_split

# Define the base directory where images are located
base_dir = '/content/Wildfire-prediction/Images'

# Define the directories for train, test, and validation sets
train_dir = os.path.join(base_dir, 'train')
test_dir = os.path.join(base_dir, 'test')
val_dir = os.path.join(base_dir, 'validation')

# Create the train, test, and validation directories if they don't exist
os.makedirs(train_dir, exist_ok=True)
os.makedirs(test_dir, exist_ok=True)
os.makedirs(val_dir, exist_ok=True)

# Get the list of image files from the base_dir
image_files = [f for f in os.listdir(base_dir) if os.path.isfile(os.path.join(base_dir, f))]

# Split the files into training and remaining (test + validation)
train_files, remaining_files = train_test_split(image_files, test_size=0.3, random_state=42)

# Split the remaining files into test and validation (50/50 split of the remaining 30%)
test_files, val_files = train_test_split(remaining_files, test_size=0.5, random_state=42)

# Function to move files to the target directory
def move_files(file_list, source_dir, target_dir):
    for file_name in file_list:
        source_path = os.path.join(source_dir, file_name)
        target_path = os.path.join(target_dir, file_name)
        # Check if the source file exists before attempting to move
        if os.path.exists(source_path):
            shutil.move(source_path, target_path)
        else:
            print(f"Warning: File not found at source path: {source_path}")


# Move files to their respective directories
move_files(train_files, base_dir, train_dir)
move_files(test_files, base_dir, test_dir)
move_files(val_files, base_dir, val_dir)

print(f"Total images: {len(image_files)}")
print(f"Training images: {len(train_files)}")
print(f"Test images: {len(test_files)}")
print(f"Validation images: {len(val_files)}")

from tensorflow.keras.preprocessing.image import ImageDataGenerator
import os # Import os

train_gen = ImageDataGenerator(rescale=1./255)
val_gen = ImageDataGenerator(rescale=1./255)
test_gen = ImageDataGenerator(rescale=1./255)

# Image size and batch
img_size = (128, 128)
batch_size = 32

base_dir = '/content/Wildfire-prediction/Images'
train_dir = os.path.join(base_dir, 'train')
val_dir = os.path.join(base_dir, 'validation') # Note the correct directory name 'validation'
test_dir = os.path.join(base_dir, 'test')


train_data = train_gen.flow_from_directory(train_dir, target_size=img_size, batch_size=batch_size, class_mode='binary')
val_data = val_gen.flow_from_directory(val_dir, target_size=img_size, batch_size=batch_size, class_mode='binary')
test_data = test_gen.flow_from_directory(test_dir, target_size=img_size, batch_size=batch_size, class_mode='binary')

"""#Streamlit"""

import joblib
joblib.dump(model, 'wildfire_model.py')

!pip install -q streamlit

import streamlit as st
import joblib
import numpy as np

# Load the trained model
model = joblib.load('wildfire_model.py')

st.title('Wildfire Prediction')

st.write('Enter the following environmental conditions to predict the likelihood of a wildfire.')

# Input fields for the features used by the model
latitude = st.number_input('Latitude', value=31.79)
longitude = st.number_input('Longitude', value=-7.09)
NDVI = st.number_input('NDVI', value=0.5)
temperature = st.number_input('Temperature (Lag 1)', value=25.0)
precipitation = st.number_input('Precipitation (Lag 1)', value=0.0)
humidity = st.number_input('Dew Point (Lag 1)', value=10.0)
windspeed = st.number_input('Wind Speed (Lag 1)', value=5.0)
year = st.number_input('Year', value=2023, step=1)
month = st.number_input('Month', value=7, min_value=1, max_value=12, step=1)
day = st.number_input('Day', value=15, min_value=1, max_value=31, step=1)


# Create a feature array from the inputs
features = np.array([[latitude, longitude, NDVI, temperature, precipitation, humidity, windspeed, year, month, day]])

!streamlit run wildfire_model.py